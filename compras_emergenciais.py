# compras_emergenciais_app.py

import streamlit as streamlit_app
import pandas as pandas_lib
import plotly.express as plotly_express
from datetime import datetime as data_hora
import os as sistema_operacional

# Caminho do arquivo CSV
CAMINHO_ARQUIVO_DADOS = "cadastro_compras.csv"

# Carrega os dados
def carregar_dados():
    if sistema_operacional.path.exists(CAMINHO_ARQUIVO_DADOS):
        return pandas_lib.read_csv(CAMINHO_ARQUIVO_DADOS, dtype={"ID": str})
    else:
        return pandas_lib.DataFrame(columns=[
            "ID", "Nome", "Registro", "OS", "RC", "TAG", "Descri√ß√£o", "Tipo",
            "Data Solicita√ß√£o", "Lead Time", "Status", "Previs√£o Entrega",
            "Motivo Atraso", "Ordem de Compra", "Prioridade", "Observa√ß√µes"
        ])

# Salva os dados
def salvar_dados(dataframe):
    dataframe.to_csv(CAMINHO_ARQUIVO_DADOS, index=False)

# Tela do administrador aprimorada
def tela_administrador():
    streamlit_app.title("üìä Painel do Administrador - Vis√£o Geral e Gest√£o")
    dataframe = carregar_dados()

    if dataframe.empty:
        streamlit_app.info("Nenhuma solicita√ß√£o cadastrada.")
        return

    # Convers√£o de datas para c√°lculo de lead time
    dataframe["Data Solicita√ß√£o"] = pandas_lib.to_datetime(dataframe["Data Solicita√ß√£o"], errors='coerce')
    dataframe["Previs√£o Entrega"] = pandas_lib.to_datetime(dataframe["Previs√£o Entrega"], errors='coerce')

    dataframe["Lead Time"] = (dataframe["Previs√£o Entrega"] - dataframe["Data Solicita√ß√£o"]).dt.days

    streamlit_app.markdown("### üìå Indicadores Gerais")
    coluna_1, coluna_2, coluna_3 = streamlit_app.columns(3)
    with coluna_1:
        streamlit_app.metric("Total de Solicita√ß√µes", len(dataframe))
    with coluna_2:
        streamlit_app.metric("M√©dia de Lead Time", int(dataframe["Lead Time"].mean(skipna=True)) if not dataframe["Lead Time"].isna().all() else "-")
    with coluna_3:
        streamlit_app.metric("Pendentes", len(dataframe[dataframe["Status"] != "Processo Conclu√≠do"]))

    streamlit_app.markdown("### üìà Lead Time por Solicita√ß√£o")
    streamlit_app.dataframe(dataframe[["ID", "Descri√ß√£o", "Data Solicita√ß√£o", "Previs√£o Entrega", "Lead Time", "Status"]])

    streamlit_app.markdown("### üìä Gr√°fico de Status")
    grafico_status = dataframe["Status"].value_counts().reset_index()
    grafico_status.columns = ["Status", "Quantidade"]
    grafico_gerado = plotly_express.bar(grafico_status, x="Status", y="Quantidade", color="Status", text="Quantidade")
    streamlit_app.plotly_chart(grafico_gerado, use_container_width=True)

    streamlit_app.markdown("### ‚úèÔ∏è Edi√ß√£o de Solicita√ß√£o")
    opcoes_solicitacao = (dataframe["ID"].astype(str) + " - " + dataframe["Descri√ß√£o"]).tolist()
    selecionada = streamlit_app.selectbox("Selecione a solicita√ß√£o para editar", opcoes_solicitacao)

    if selecionada and " - " in selecionada:
        identificador = selecionada.split(" - ")[0].strip()
        linha_selecionada = dataframe[dataframe["ID"] == identificador]
        if not linha_selecionada.empty:
            indice = linha_selecionada.index[0]
            prioridade_atual = dataframe.at[indice, "Prioridade"]
            nova_prioridade = streamlit_app.selectbox("Prioridade", ["Baixa", "M√©dia", "Alta", "Cr√≠tica"], index=["Baixa", "M√©dia", "Alta", "Cr√≠tica"].index(prioridade_atual))
            novas_observacoes = streamlit_app.text_area("Observa√ß√µes", value=dataframe.at[indice, "Observa√ß√µes"])
            marcar_concluido = streamlit_app.checkbox("Marcar como Conclu√≠do")

            if streamlit_app.button("Salvar Altera√ß√µes"):
                dataframe.at[indice, "Prioridade"] = nova_prioridade
                dataframe.at[indice, "Observa√ß√µes"] = novas_observacoes
                if marcar_concluido:
                    dataframe.at[indice, "Status"] = "Processo Conclu√≠do"
                    try:
                        tempo_total = (dataframe.at[indice, "Previs√£o Entrega"] - dataframe.at[indice, "Data Solicita√ß√£o"]).days
                        dataframe.at[indice, "Lead Time"] = tempo_total
                    except:
                        pass
                salvar_dados(dataframe)
                streamlit_app.success("Altera√ß√µes salvas com sucesso!")

# Telas mantidas
def tela_cadastro():
    pass

def tela_comprador():
    pass

# Execu√ß√£o principal
def executar_aplicativo():
    perfil_selecionado = streamlit_app.sidebar.selectbox("Selecione o Perfil", ["Requisitante", "Comprador", "Administrador"])

    if perfil_selecionado == "Requisitante":
        tela_cadastro()
    elif perfil_selecionado == "Comprador":
        tela_comprador()
    elif perfil_selecionado == "Administrador":
        tela_administrador()

if __name__ == "__main__":
    executar_aplicativo()
