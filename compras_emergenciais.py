# compras_emergenciais_app.py

import streamlit as st
import pandas as pd
from datetime import datetime
import uuid
import os

# Caminho do arquivo CSV
DATA_FILE = "cadastro_compras.csv"

# Carrega os dados

def carregar_dados():
    if os.path.exists(DATA_FILE):
        return pd.read_csv(DATA_FILE, dtype={"ID": str})
    else:
        return pd.DataFrame(columns=[
            "ID", "Nome", "Registro", "OS", "RC", "TAG", "Descri√ß√£o", "Tipo",
            "Data Solicita√ß√£o", "Lead Time", "Status", "Previs√£o Entrega",
            "Motivo Atraso", "Ordem de Compra", "Prioridade", "Observa√ß√µes"
        ])

# Salva os dados

def salvar_dados(df):
    df.to_csv(DATA_FILE, index=False)

# Tela do administrador com painel din√¢mico

def tela_admin():
    st.title("üìä Painel do Administrador - Vis√£o Geral")
    df = carregar_dados()

    if df.empty:
        st.info("Nenhum dado cadastrado.")
        return

    # M√©tricas principais
    col1, col2, col3 = st.columns(3)
    col1.metric("Total de Solicita√ß√µes", len(df))
    col2.metric("Solicita√ß√µes Pendentes", len(df[df["Status"] == "Pendente"]))
    col3.metric("Solicita√ß√µes Conclu√≠das", len(df[df["Status"] == "Processo Conclu√≠do"]))

    # Filtros din√¢micos
    with st.expander("üîç Filtrar Solicita√ß√µes"):
        status_filtro = st.multiselect("Filtrar por Status", options=df["Status"].unique(), default=df["Status"].unique())
        tipo_filtro = st.multiselect("Filtrar por Tipo", options=df["Tipo"].unique(), default=df["Tipo"].unique())
        prioridade_filtro = st.multiselect("Filtrar por Prioridade", options=df["Prioridade"].unique(), default=df["Prioridade"].unique())

        df_filtrado = df[
            df["Status"].isin(status_filtro) &
            df["Tipo"].isin(tipo_filtro) &
            df["Prioridade"].isin(prioridade_filtro)
        ]

    st.markdown("### üìã Solicita√ß√µes Filtradas")
    st.dataframe(df_filtrado)
    st.download_button("üì• Exportar Relat√≥rio", df_filtrado.to_csv(index=False).encode("utf-8"), file_name="relatorio_compras.csv", mime="text/csv")

    st.markdown("### ‚úèÔ∏è Edi√ß√£o de Solicita√ß√£o")
    opcoes = (df["ID"].astype(str) + " - " + df["Descri√ß√£o"]).tolist()
    if not opcoes:
        st.warning("Nenhuma solicita√ß√£o dispon√≠vel.")
        return

    selecionada = st.selectbox("Selecione uma solicita√ß√£o para gerenciar", opcoes)

    if selecionada and " - " in selecionada:
        id_str = selecionada.split(" - ")[0].strip()
        linha = df[df["ID"] == id_str]
        if linha.empty:
            st.error("Solicita√ß√£o n√£o encontrada.")
            return
        idx = linha.index[0]

        st.markdown(f"### üìÑ Gerenciar Solicita√ß√£o")
        prioridade = st.selectbox("Prioridade", ["Baixa", "M√©dia", "Alta", "Cr√≠tica"], index=["Baixa", "M√©dia", "Alta", "Cr√≠tica"].index(df.at[idx, "Prioridade"]))
        observacoes = st.text_area("Observa√ß√µes", value=df.at[idx, "Observa√ß√µes"])
        concluir = st.checkbox("Marcar como Conclu√≠do")

        if st.button("Salvar Altera√ß√µes"):
            df.at[idx, "Prioridade"] = prioridade
            df.at[idx, "Observa√ß√µes"] = observacoes
            if concluir:
                df.at[idx, "Status"] = "Processo Conclu√≠do"
                try:
                    data_solicitacao = datetime.strptime(df.at[idx, "Data Solicita√ß√£o"], "%Y-%m-%d")
                    data_entrega = datetime.strptime(df.at[idx, "Previs√£o Entrega"], "%Y-%m-%d")
                    df.at[idx, "Lead Time"] = (data_entrega - data_solicitacao).days
                except:
                    pass
            salvar_dados(df)
            st.success("Solicita√ß√£o atualizada com sucesso!")

